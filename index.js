function customException(a,b){this.message=b?b:a,this.name=a}function routePathRegex(a){return void 0!=a&&null!=a&&""!=a?!(specialCharPattern.test(a)||emptyStringPattern.test(a)):null}function isNumber(a){return void 0!=a&&null!=a&&""!=a&&numberPattern.test(a.toString())}function isEmptyObject(a){for(var b in a)if(a.hasOwnProperty(b))return!1;return"{}"===JSON.stringify(a)}function setMicroserviceFunctionScope(a,b){return function(c,d){var e=b.url+":"+b.serverPort;c.url=1==b.excludeRoutePath?c.url.replace("/"+b.routePath,""):c.url,console.log("micro-service '"+b.name+"' called, request url::"+e+c.url+", [Time:"+new Date+"]"),a.web(c,d,{target:e},function(a){if(console.log(errMsg+"request url::"+e+c.url),console.log(a),a)return d.json({code:1,errorMsg:"Something went wrong in server "+b.name,error:a})})}}function createGateway(a){try{var b=null,c=null;if(a.sslKeyPath&&a.sslCertPath)try{var d=fs.readFileSync(path.join(__dirname,"../../",a.sslKeyPath),"utf8"),e=fs.readFileSync(path.join(__dirname,"../../",a.sslCertPath),"utf8"),f=[];if(a.sslBundlePath&&a.sslBundlePath.length>0)for(var g=0;g<a.sslBundlePath.length;g++){var h=fs.readFileSync(path.join(__dirname,"../../",a.sslBundlePath[g]),"utf8");f.push(h)}b={key:d,cert:e,ca:f},c=httpProxy.createProxyServer({ssl:b,secure:1==a.verifySSL})}catch(a){throw new customException(errMsg+sslErrorMsg,a.message)}else c=httpProxy.createProxyServer();if(c){var i={};if(a.serverList&&a.serverList.length>0){for(var j=[],k=[],g=0;g<a.serverList.length;g++){var l=a.serverList[g],m=routePathRegex(l.routePath);isNumber(l.serverPort)?1==m?(j.push(l.name),i[l.routePath]=setMicroserviceFunctionScope(c,l)):null==m?(k.push(l.name),console.log(warnMsg+"micro-service '"+l.name+"' not created, 'routePath' is not defined.")):(k.push(l.name),console.log(warnMsg+"micro-service '"+l.name+"' not created,'routePath' have special characters.")):(k.push(l.name),console.log(warnMsg+"micro-service '"+l.name+"' not created, 'serverPort' is not defined correctly."))}if(k.length>=1)throw console.log("micro-services '"+k.toString()+"' are not created for gateway '"+a.name+"'"),new customException(errMsg+msErrorMsg,k.toString());if(isEmptyObject(i))throw new customException(errMsg+msErrorMsg);return console.log("micro-services '"+j.toString()+"' are created for gateway '"+a.name+"'"),i}throw new customException(errMsg+msEmptyListMsg)}}catch(a){throw a}}var httpProxy=require("http-proxy"),path=require("path"),fs=require("fs"),specialCharPattern=/[`~!@#$%^&*()|+\-=?;:'",.<>\{\}\[\]\\\/]/gi,emptyStringPattern=/ /g,numberPattern=/^\d+$/,errMsg="Error!!! ",warnMsg="Warning!!! ",msErrorMsg="micro-services not created. ",invalidConfigMsg="Invalid configuration. ",msEmptyListMsg="micro-service list are empty. ",sslErrorMsg="Configuring SSL certificate problem. ",gatewayFunctions={createGateway:createGateway};module.exports=gatewayFunctions;var config={name:"microservice-gateway",sslKeyPath:"",sslCertPath:"",sslBundlePath:[""],verifySSL:!1,serverList:[{name:"server1",url:"http://api.done.to",serverPort:5e3,routePath:"c1",excludeRoutePath:!0}]};